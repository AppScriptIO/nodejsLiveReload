"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.watchFile = watchFile;var _chokidar = _interopRequireDefault(require("chokidar"));
var _coreJs = require("core-js");

async function watchFile({
  fileArray,
  triggerCallback,

  notificationTriggerDelay = 100,
  notificationTrigger = true,
  ignoreNodeModules = true,
  logMessage = false })
{
  let watcher = _chokidar.default.watch(fileArray, {
    ignored: ignoreNodeModules ? new RegExp(/node_modules/) : false,
    usePolling: false });


  return new _coreJs.Promise((resolve, reject) => {
    watcher.
    on('ready', path => {
      if (logMessage) {
        console.group('• Watching the following list of paths:');
        console.log(watcher.getWatched());
        console.groupEnd();
      }
      resolve();
    }).
    on('add', path => {

    }).
    on('change', path => {
      if (notificationTrigger) {
        if (logMessage) console.log(`• File ${path} has been changed.`);
        triggerCallback();
      }

      notificationTrigger = false;
      setTimeout(() => {notificationTrigger = true;}, notificationTriggerDelay);
    }).
    on('unlink', path => {if (logMessage) console.log(`• File ${path} has been removed. No action taken regarding running tests.`);});
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS93YXRjaEZpbGUuanMiXSwibmFtZXMiOlsid2F0Y2hGaWxlIiwiZmlsZUFycmF5IiwidHJpZ2dlckNhbGxiYWNrIiwibm90aWZpY2F0aW9uVHJpZ2dlckRlbGF5Iiwibm90aWZpY2F0aW9uVHJpZ2dlciIsImlnbm9yZU5vZGVNb2R1bGVzIiwibG9nTWVzc2FnZSIsIndhdGNoZXIiLCJjaG9raWRhciIsIndhdGNoIiwiaWdub3JlZCIsIlJlZ0V4cCIsInVzZVBvbGxpbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uIiwicGF0aCIsImNvbnNvbGUiLCJncm91cCIsImxvZyIsImdldFdhdGNoZWQiLCJncm91cEVuZCIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI4TEFBQTtBQUNBOztBQUVPLGVBQWVBLFNBQWYsQ0FBeUI7QUFDNUJDLEVBQUFBLFNBRDRCO0FBRTVCQyxFQUFBQSxlQUY0Qjs7QUFJNUJDLEVBQUFBLHdCQUF3QixHQUFHLEdBSkM7QUFLNUJDLEVBQUFBLG1CQUFtQixHQUFHLElBTE07QUFNNUJDLEVBQUFBLGlCQUFpQixHQUFHLElBTlE7QUFPNUJDLEVBQUFBLFVBQVUsR0FBRyxLQVBlLEVBQXpCO0FBUUo7QUFDQyxNQUFJQyxPQUFPLEdBQUdDLGtCQUFTQyxLQUFULENBQWVSLFNBQWYsRUFBMEI7QUFDcENTLElBQUFBLE9BQU8sRUFBR0wsaUJBQUQsR0FBc0IsSUFBSU0sTUFBSixDQUFXLGNBQVgsQ0FBdEIsR0FBbUQsS0FEeEI7QUFFcENDLElBQUFBLFVBQVUsRUFBRSxLQUZ3QixFQUExQixDQUFkOzs7QUFLQSxTQUFPLElBQUlDLGVBQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDcENSLElBQUFBLE9BQU87QUFDRlMsSUFBQUEsRUFETCxDQUNRLE9BRFIsRUFDaUJDLElBQUksSUFBSTtBQUNqQixVQUFHWCxVQUFILEVBQWU7QUFDWFksUUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMseUNBQWQ7QUFDQUQsUUFBQUEsT0FBTyxDQUFDRSxHQUFSLENBQVliLE9BQU8sQ0FBQ2MsVUFBUixFQUFaO0FBQ0FILFFBQUFBLE9BQU8sQ0FBQ0ksUUFBUjtBQUNIO0FBQ0RSLE1BQUFBLE9BQU87QUFDVixLQVJMO0FBU0tFLElBQUFBLEVBVEwsQ0FTUSxLQVRSLEVBU2VDLElBQUksSUFBSTs7QUFFbEIsS0FYTDtBQVlLRCxJQUFBQSxFQVpMLENBWVEsUUFaUixFQVlrQkMsSUFBSSxJQUFJO0FBQ2xCLFVBQUdiLG1CQUFILEVBQXdCO0FBQ3BCLFlBQUdFLFVBQUgsRUFBZVksT0FBTyxDQUFDRSxHQUFSLENBQWEsVUFBU0gsSUFBSyxvQkFBM0I7QUFDZmYsUUFBQUEsZUFBZTtBQUNsQjs7QUFFREUsTUFBQUEsbUJBQW1CLEdBQUcsS0FBdEI7QUFDQW1CLE1BQUFBLFVBQVUsQ0FBQyxNQUFNLENBQUVuQixtQkFBbUIsR0FBRyxJQUF0QixDQUE0QixDQUFyQyxFQUF1Q0Qsd0JBQXZDLENBQVY7QUFDSCxLQXBCTDtBQXFCS2EsSUFBQUEsRUFyQkwsQ0FxQlEsUUFyQlIsRUFxQmtCQyxJQUFJLElBQUksQ0FBRSxJQUFHWCxVQUFILEVBQWVZLE9BQU8sQ0FBQ0UsR0FBUixDQUFhLFVBQVNILElBQUssNkRBQTNCLEVBQTBGLENBckJySTtBQXNCSCxHQXZCTSxDQUFQO0FBd0JIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNob2tpZGFyIGZyb20gJ2Nob2tpZGFyJ1xuaW1wb3J0IHsgUHJvbWlzZSB9IGZyb20gJ2NvcmUtanMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2F0Y2hGaWxlKHsgXG4gICAgZmlsZUFycmF5LFxuICAgIHRyaWdnZXJDYWxsYmFjaywgXG4gICAgLy8gRm9sbG93aW5nIGRlbGF5IHNvbHZlcyB0aGUgaXNzdWUgb2YgY2xvc2xleSByZWNlaXZlZCBub3RpZmljYXRpb25zLCBwcmV2ZW50aW5nIGR1cGxpY2F0ZSBhY3Rpb25zIGZvciB0aGUgc2FtZSByZWxhdGVkIG5vdGlmaWNhdGlvbnMgKGUuZy4gZG9ja2VyLXdpbmRvd3Mtdm9sdW1lLXdhdGNoZXIgbWlzdGFrZW5nbHkgdHJpZ2dlcnMgZHVwbGljYXRlIG5vdGlmaWNhdGlvbnMgZm9yIGVhY2ggY2hhZ25lKS5cbiAgICBub3RpZmljYXRpb25UcmlnZ2VyRGVsYXkgPSAxMDAsIC8vIDEwMCBtcyBiZXR3ZWVuIGFjY2VwdGluZyBub3RpZmljYXRpb25zIGFuZCB0cmlnZ2VyaW5nIGFjdGlvbi4gVGhpcyBwcmV2ZW50cyBkdXBsaWNhdGUgZXhlY3V0aW9ucyBmcm9uIHdyb25nIGltbWVkaWF0ZSBkdXBsaWNhdGUgbm90aWZpY2F0aW9uIGZvIHRoZSBjb250YWluZXIuXG4gICAgbm90aWZpY2F0aW9uVHJpZ2dlciA9IHRydWUsIC8vIG9uIC8gb2ZmIHN3aXRjaCBmb3IgdGFraW5nIGFjdGlvbiBhZnRlciBhIG5vdGlmaWNhdGlvbiByZWNlaXZlZFxuICAgIGlnbm9yZU5vZGVNb2R1bGVzID0gdHJ1ZSwgXG4gICAgbG9nTWVzc2FnZSA9IGZhbHNlIC8vIGNvbnNvbGUgbG9nIG1lc3NhZ2VzIG9uIGV2ZW50cyBlLmcuIGxvZyBsaXN0IG9mIGZpbGVzIGJlaW5nIHdhdGNoZWQuXG59KSB7XG4gICAgbGV0IHdhdGNoZXIgPSBjaG9raWRhci53YXRjaChmaWxlQXJyYXksIHtcbiAgICAgICAgaWdub3JlZDogKGlnbm9yZU5vZGVNb2R1bGVzKSA/IG5ldyBSZWdFeHAoL25vZGVfbW9kdWxlcy8pIDogZmFsc2UsXG4gICAgICAgIHVzZVBvbGxpbmc6IGZhbHNlXG4gICAgfSlcbiAgICBcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB3YXRjaGVyXG4gICAgICAgICAgICAub24oJ3JlYWR5JywgcGF0aCA9PiB7XG4gICAgICAgICAgICAgICAgaWYobG9nTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmdyb3VwKCfigKIgV2F0Y2hpbmcgdGhlIGZvbGxvd2luZyBsaXN0IG9mIHBhdGhzOicpXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHdhdGNoZXIuZ2V0V2F0Y2hlZCgpKSAvLyBsaXN0IHdhdGNoZWQgZmlsc2VcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignYWRkJywgcGF0aCA9PiB7IC8vIHdoZW4gdGFyZ2V0L3BhdGggYWRkZWQgdG8gd2F0Y2hlclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBGaWxlICR7cGF0aH0gaGFzIGJlZW4gYWRkZWRgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignY2hhbmdlJywgcGF0aCA9PiB7XG4gICAgICAgICAgICAgICAgaWYobm90aWZpY2F0aW9uVHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICBpZihsb2dNZXNzYWdlKSBjb25zb2xlLmxvZyhg4oCiIEZpbGUgJHtwYXRofSBoYXMgYmVlbiBjaGFuZ2VkLmApXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJDYWxsYmFjaygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGFsbG93IHRyaWdnZXJpbmcgb2YgYWN0aW9uIGZyb20gbmV4dCBub3RpZmljYXRpb24gb25seSBhZnRlciBkZWxheS5cbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25UcmlnZ2VyID0gZmFsc2UgXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IG5vdGlmaWNhdGlvblRyaWdnZXIgPSB0cnVlIH0sIG5vdGlmaWNhdGlvblRyaWdnZXJEZWxheSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCd1bmxpbmsnLCBwYXRoID0+IHsgaWYobG9nTWVzc2FnZSkgY29uc29sZS5sb2coYOKAoiBGaWxlICR7cGF0aH0gaGFzIGJlZW4gcmVtb3ZlZC4gTm8gYWN0aW9uIHRha2VuIHJlZ2FyZGluZyBydW5uaW5nIHRlc3RzLmApIH0pXG4gICAgfSlcbn0iXX0=