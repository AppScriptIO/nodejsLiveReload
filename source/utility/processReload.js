"use strict";const EventEmitter = require('events');
const childProcess = require('child_process');


function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

class ServerLivereload extends EventEmitter {

  constructor(debugArguments, entrypoint) {
    super();
    this.node;
    this.debugArguments = debugArguments;
    this.entrypoint = entrypoint;

    process.on('exit', function () {
      if (this.node) this.node.kill();
    });

  }

  reload() {
    if (this.node) this.node.kill();


    this.node = childProcess.fork(this.entrypoint.filename, { cwd: this.entrypoint.filePath, stdio: 'inherit', execArgv: this.debugArguments });
    this.node.on('message', m => {

      this.emit('reload');
    });

    this.node.on('close', code => {
      if (code === 8) {
        console.error('Error detected, waiting for changes.');
      }
    });






  }}


module.exports = ServerLivereload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS91dGlsaXR5L3Byb2Nlc3NSZWxvYWQuanMiXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwicmVxdWlyZSIsImNoaWxkUHJvY2VzcyIsInNsZWVwIiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJTZXJ2ZXJMaXZlcmVsb2FkIiwiY29uc3RydWN0b3IiLCJkZWJ1Z0FyZ3VtZW50cyIsImVudHJ5cG9pbnQiLCJub2RlIiwicHJvY2VzcyIsIm9uIiwia2lsbCIsInJlbG9hZCIsImZvcmsiLCJmaWxlbmFtZSIsImN3ZCIsImZpbGVQYXRoIiwic3RkaW8iLCJleGVjQXJndiIsIm0iLCJlbWl0IiwiY29kZSIsImNvbnNvbGUiLCJlcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJhQUFBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBNUI7QUFDQSxNQUFNQyxZQUFZLEdBQUdELE9BQU8sQ0FBQyxlQUFELENBQTVCOzs7QUFHQSxTQUFTRSxLQUFULENBQWVDLEVBQWYsRUFBbUI7QUFDakIsU0FBTyxJQUFJQyxPQUFKLENBQVlDLE9BQU8sSUFBSUMsVUFBVSxDQUFDRCxPQUFELEVBQVVGLEVBQVYsQ0FBakMsQ0FBUDtBQUNEOztBQUVELE1BQU1JLGdCQUFOLFNBQStCUixZQUEvQixDQUE0Qzs7QUFFeENTLEVBQUFBLFdBQVcsQ0FBQ0MsY0FBRCxFQUFpQkMsVUFBakIsRUFBNkI7QUFDcEM7QUFDQSxTQUFLQyxJQUFMO0FBQ0EsU0FBS0YsY0FBTCxHQUFzQkEsY0FBdEI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjs7QUFFQUUsSUFBQUEsT0FBTyxDQUFDQyxFQUFSLENBQVcsTUFBWCxFQUFtQixZQUFXO0FBQzFCLFVBQUksS0FBS0YsSUFBVCxFQUFlLEtBQUtBLElBQUwsQ0FBVUcsSUFBVjtBQUNsQixLQUZEOztBQUlIOztBQUVEQyxFQUFBQSxNQUFNLEdBQUc7QUFDTCxRQUFJLEtBQUtKLElBQVQsRUFBZSxLQUFLQSxJQUFMLENBQVVHLElBQVY7OztBQUdmLFNBQUtILElBQUwsR0FBWVYsWUFBWSxDQUFDZSxJQUFiLENBQWtCLEtBQUtOLFVBQUwsQ0FBZ0JPLFFBQWxDLEVBQTRDLEVBQUVDLEdBQUcsRUFBRSxLQUFLUixVQUFMLENBQWdCUyxRQUF2QixFQUFpQ0MsS0FBSyxFQUFDLFNBQXZDLEVBQWtEQyxRQUFRLEVBQUUsS0FBS1osY0FBakUsRUFBNUMsQ0FBWjtBQUNBLFNBQUtFLElBQUwsQ0FBVUUsRUFBVixDQUFhLFNBQWIsRUFBeUJTLENBQUQsSUFBTzs7QUFFM0IsV0FBS0MsSUFBTCxDQUFVLFFBQVY7QUFDSCxLQUhEOztBQUtBLFNBQUtaLElBQUwsQ0FBVUUsRUFBVixDQUFhLE9BQWIsRUFBdUJXLElBQUQsSUFBVTtBQUM1QixVQUFHQSxJQUFJLEtBQUssQ0FBWixFQUFlO0FBQ1hDLFFBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLHNDQUFkO0FBQ0g7QUFDSixLQUpEOzs7Ozs7O0FBV0gsR0FuQ3VDOzs7QUFzQzVDQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJyQixnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKVxuY29uc3QgY2hpbGRQcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpXG4vLyBpbXBvcnQgcHJveHlNaWRkbGV3YXJlIGZyb20gJ2h0dHAtcHJveHktbWlkZGxld2FyZSdcblxuZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG5jbGFzcyBTZXJ2ZXJMaXZlcmVsb2FkIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihkZWJ1Z0FyZ3VtZW50cywgZW50cnlwb2ludCkge1xuICAgICAgICBzdXBlcigpXG4gICAgICAgIHRoaXMubm9kZTtcbiAgICAgICAgdGhpcy5kZWJ1Z0FyZ3VtZW50cyA9IGRlYnVnQXJndW1lbnRzXG4gICAgICAgIHRoaXMuZW50cnlwb2ludCA9IGVudHJ5cG9pbnRcbiAgICAgICAgLy8gY2xlYW4gdXAgaWYgYW4gZXJyb3IgZ29lcyB1bmhhbmRsZWQuXG4gICAgICAgIHByb2Nlc3Mub24oJ2V4aXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGUpIHRoaXMubm9kZS5raWxsKClcbiAgICAgICAgfSlcblxuICAgIH1cblxuICAgIHJlbG9hZCgpIHtcbiAgICAgICAgaWYgKHRoaXMubm9kZSkgdGhpcy5ub2RlLmtpbGwoKVxuXG4gICAgICAgIC8vIG5vZGUgPSBjaGlsZFByb2Nlc3MuZm9yaygnYmFiZWxDb21waWxlLmVudHJ5cG9pbnQuanMnLCB7IGN3ZDogJy9hcHAvc2VydmVyU2lkZScsIHN0ZGlvOidpbmhlcml0JywgZXhlY0FyZ3Y6IGRlYnVnQXJndW1lbnRzfSlcbiAgICAgICAgdGhpcy5ub2RlID0gY2hpbGRQcm9jZXNzLmZvcmsodGhpcy5lbnRyeXBvaW50LmZpbGVuYW1lLCB7IGN3ZDogdGhpcy5lbnRyeXBvaW50LmZpbGVQYXRoLCBzdGRpbzonaW5oZXJpdCcsIGV4ZWNBcmd2OiB0aGlzLmRlYnVnQXJndW1lbnRzfSlcbiAgICAgICAgdGhpcy5ub2RlLm9uKCdtZXNzYWdlJywgKG0pID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdTZXJ2ZXIgcmVhZHkgJiBsaXN0ZW5pbmcuJywgbSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbG9hZCcpXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBub2RlID0gY2hpbGRQcm9jZXNzLnNwYXduKCdub2RlJywgWydiYWJlbENvbXBpbGUuZW50cnlwb2ludC5qcyddLCB7IGN3ZDogJy9hcHAvc2VydmVyU2lkZScsIHN0ZGlvOlswLDEsMl0gfSlcbiAgICAgICAgdGhpcy5ub2RlLm9uKCdjbG9zZScsIChjb2RlKSA9PiB7XG4gICAgICAgICAgICBpZihjb2RlID09PSA4KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGV0ZWN0ZWQsIHdhaXRpbmcgZm9yIGNoYW5nZXMuJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLy8gcHJvY2Vzcy5vbignc3puJywgKGNvZGUpID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCdsaXN0ZW5pbmcgZXZlbnQgZW1pdHRlZCBmb3IgY2hpbGQgcHJvY2VzcyAxIScpXG4gICAgICAgIC8vIH0pICAgIFxuICAgICAgICAvLyBub2RlLm9uKCdzem4nLCAoY29kZSkgPT4ge1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ2xpc3RlbmluZyBldmVudCBlbWl0dGVkIGZvciBjaGlsZCBwcm9jZXNzIDEhJylcbiAgICAgICAgLy8gfSkgICAgXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlckxpdmVyZWxvYWQ7Il19